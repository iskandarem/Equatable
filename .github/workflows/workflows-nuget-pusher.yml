name: Publish NuGet Package

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Stop if commit is from GitHub Actions
        run: |
          AUTHOR="$(git log -1 --pretty=%an)"
          if [[ "$AUTHOR" == "github-actions" ]]; then
            echo "Commit made by GitHub Actions. Skipping..."
            exit 0
          fi

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Get current version from .csproj
        id: get-version
        run: |
          FILE=$(find ./Equatable -name "*.csproj")
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" "$FILE")
          echo "Current version: $VERSION"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update version in .csproj
        run: |
          FILE=$(find ./Equatable -name "*.csproj")
          sed -i "s|<Version>.*</Version>|<Version>${{ steps.get-version.outputs.new_version }}</Version>|" "$FILE"

      - name: Commit and push new version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add ./Equatable/*.csproj
          git commit -m "chore: bump version to ${{ steps.get-version.outputs.new_version }}"
          git push origin master

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Pack NuGet package
        run: dotnet pack --configuration Release --no-build --output ./nupkg

      - name: Publish to NuGet.org
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY_FOR_EQUATABLE }} --source https://api.nuget.org/v3/index.json
